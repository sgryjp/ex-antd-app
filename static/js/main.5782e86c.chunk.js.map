{"version":3,"sources":["app1/Plans.tsx","app1/Detail.tsx","app1/App.tsx","app2/App.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Content","Layout","Plans","props","match","useRouteMatch","style","margin","padding","background","minHeight","dataSource","plans","renderItem","plan","Item","to","url","id","name","Detail","homeUri","replace","RegExp","planId","useParams","find","p","className","size","bordered","label","title","moment","format","tabIndex","type","percent","direction","Step","App","useState","path","Header","Footer","basename","role","component","App1","App2","textAlign","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5782e86c.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Link,\n  useRouteMatch,\n} from 'react-router-dom';\nimport {\n  Breadcrumb,\n  Layout,\n  List,\n} from 'antd';\nimport Plan from './Plan';\n\nconst {Content} = Layout;\n\ntype Props = {\n  plans: Plan[],\n};\n\nconst Plans: React.FC<Props> = (props: Props) => {\n  const match = useRouteMatch();\n\n  return (\n    <div>\n      <Breadcrumb style={{margin: '16px 0'}}>\n      </Breadcrumb>\n      <Layout style={{padding: '24px 0', background: '#fff'}}>\n        <Content style={{padding: '0 24px', minHeight: 280}}>\n          <h1>Plans</h1>\n          <List\n            dataSource={props.plans}\n            renderItem={plan => (\n              <List.Item>\n                <Link to={`${match.url}/${plan.id}`}>{plan.name}</Link>\n              </List.Item>\n            )}\n          />\n        </Content>\n      </Layout>\n    </div >\n  );\n};\n\nexport default Plans;\n","import React from 'react';\nimport {\n  Link,\n  useParams,\n  useRouteMatch,\n} from 'react-router-dom';\nimport {\n  Breadcrumb,\n  Button,\n  Descriptions,\n  Layout,\n  Progress,\n  Steps,\n  Tooltip,\n} from 'antd';\nimport Plan from './Plan';\nimport moment from 'moment';\n/* import 'moment/locale/ja'; */\n\nconst {Content} = Layout;\n\ntype Props = {\n  plans: Plan[],\n};\n\nconst Detail: React.FC<Props> = (props: Props) => {\n  const match = useRouteMatch();\n  const homeUri = match.url.replace(RegExp(\"/[^/]+$\"), \"\");\n  const {planId} = useParams();\n\n  const plan = props.plans.find(p => p.id === planId)!;\n\n  return (\n    <div>\n      <Breadcrumb style={{margin: '16px 0'}}>\n        <Breadcrumb.Item><Link to={homeUri}>Home</Link></Breadcrumb.Item>\n        <Breadcrumb.Item>Plan &quot;{plan.name}&quot;</Breadcrumb.Item>\n      </Breadcrumb>\n      <Layout style={{padding: '24px 0', background: '#fff'}}>\n        <Content className=\"content\">\n          <h1 className=\"ant-typography\">{plan.name}</h1>\n\n          <h2 className=\"ant-typography\">Configuration</h2>\n          <Descriptions size=\"small\" bordered>\n            <Descriptions.Item label=\"Last update\">\n              <Tooltip title=\"The configuration is changed after processing started.\">\n                <span className=\"warning\">\n                  {moment(\"2019-12-31T13:47\").format(\"LLL\")}\n                </span>\n              </Tooltip>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Strategy\">\n              Aggressive\n            </Descriptions.Item>\n            <Descriptions.Item label=\"# or records\">\n              42712 records\n            </Descriptions.Item>\n            <Descriptions.Item label=\"# or features\">\n              28\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Data Size\">\n              42.71 MB\n            </Descriptions.Item>\n          </Descriptions>\n          <div className=\"controls\">\n            <Link to={`${match.url}/configure`} tabIndex={-1}>\n              <Button>Configure Plan</Button>\n            </Link>\n          </div>\n\n          <h2 className=\"ant-typography\">Processing</h2>\n          <div className=\"controls\">\n            <Progress type=\"circle\" percent={30} />\n            <Steps direction=\"vertical\">\n              <Steps.Step title=\"1st\" />\n              <Steps.Step title=\"2st\" />\n            </Steps>\n          </div>\n          <Descriptions size=\"small\" bordered>\n            <Descriptions.Item label=\"Started\">\n              {moment(\"2019-12-30T17:34\").format(\"LLL\")}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Finished\">\n              Not Yet\n            </Descriptions.Item>\n          </Descriptions>\n          <div className=\"controls\">\n            <Button>Start</Button>\n            <Button>Stop</Button>\n          </div>\n\n          <h2 className=\"ant-typography\">Analysis</h2>\n          <Descriptions size=\"small\" bordered>\n            <Descriptions.Item label=\"Report Generated\">\n              {moment(\"2019-12-30T17:34\").format(\"LLL\")}\n            </Descriptions.Item>\n          </Descriptions>\n          <div className=\"controls\">\n            <Link to={`${match.url}/report`} tabIndex={-1}>\n              <Button>Show Report</Button>\n            </Link>\n          </div>\n\n        </Content>\n      </Layout>\n    </div>\n  );\n};\n\nexport default Detail;\n\n","import React, {useState} from 'react';\nimport {\n  Switch,\n  Route,\n  Redirect,\n  useRouteMatch,\n} from 'react-router-dom';\nimport Plan from './Plan';\nimport Plans from './Plans';\nimport Detail from './Detail';\n\nconst App: React.FC = () => {\n  const match = useRouteMatch();\n  const [plans, setPlans] = useState(\n    [{name: \"foo\", id: \"32\"}, {name: \"bar\", id: \"27\"}] as Plan[]\n  );\n\n  return (\n    <Switch>\n      <Route path={match.url + \"/plans/:planId\"}>\n        <Detail plans={plans} />\n      </Route>\n      <Route path={match.url + \"/plans\"}>\n        <Plans plans={plans} />\n      </Route>\n      <Redirect to={match.url + \"/plans\"} />\n    </Switch>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      App2\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport {\n  HashRouter,\n  Link,\n  NavLink,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport {\n  Layout,\n} from 'antd';\nimport App1 from './app1/App';\nimport App2 from './app2/App';\n\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst {Header, Footer, Content} = Layout;\n\nconst App: React.FC = () => {\n  return (\n    <HashRouter basename=\"/ex-antd-app\">\n      <Layout>\n        <Header className=\"header\">\n          <Link to=\"/\" className=\"brand\">ex-antd-app</Link>\n          <ul className=\"menu\">\n            <li role=\"menu\"><NavLink to=\"/app1\">app1</NavLink></li>\n            <li role=\"menu\"><NavLink to=\"/app2\">app2</NavLink></li>\n          </ul>\n        </Header>\n        <Content style={{padding: '0 50px'}}>\n          <Switch>\n            <Route path=\"/app1\" component={App1} />\n            <Route path=\"/app2\" component={App2} />\n          </Switch>\n        </Content>\n        <Footer style={{textAlign: 'center'}}>\n          &copy; 2019 Suguru Yamamoto\n        </Footer>\n      </Layout>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}